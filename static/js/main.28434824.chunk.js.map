{"version":3,"sources":["flashcards/Flashcard.jsx","flashcards/FlashcardList.jsx","header/Header.jsx","utils.js","App.js","index.js"],"names":["Flashcard","flashcard","useState","flipped","setFlipped","height","setHeight","frontElement","useRef","backElement","setMaxHeight","frontHeight","current","getBoundingClientRect","backHeight","Math","max","question","answer","options","useEffect","window","addEventListener","removeEventListener","className","style","onClick","ref","map","option","FlashcardList","flashcards","id","Header","categories","submit","amountElement","categoryElement","onSubmit","e","preventDefault","amount","value","category","htmlFor","name","type","min","step","defaultValue","shuffle","array","i","length","j","floor","random","decodeString","str","textArea","document","createElement","innerHTML","App","setFlashcards","setCategories","fetch","then","response","json","trivia_categories","results","questionItem","index","correct_answer","incorrect_answers","Date","now","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.28434824.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nexport default function Flashcard({ flashcard }) {\r\n  const [flipped, setFlipped] = useState(false);\r\n  const [height, setHeight] = useState('initial');\r\n\r\n  const frontElement = useRef();\r\n  const backElement = useRef();\r\n\r\n  function setMaxHeight() {\r\n    const frontHeight = frontElement.current.getBoundingClientRect().height;\r\n    const backHeight = backElement.current.getBoundingClientRect().height;\r\n    setHeight(Math.max(frontHeight, backHeight, 100));\r\n  }\r\n\r\n  const { question, answer, options } = flashcard;\r\n\r\n  useEffect(setMaxHeight, [question, answer, options]);\r\n  useEffect(() => {\r\n    window.addEventListener('resize', setMaxHeight);\r\n    return () => window.removeEventListener('resize', setMaxHeight);\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className={`card ${flipped ? 'flipped' : ''}`}\r\n      style={{ height: height }}\r\n      onClick={() => setFlipped(!flipped)}\r\n    >\r\n      <div className='front' ref={frontElement}>\r\n        {question}\r\n        <div className='flashcard-options'>\r\n          {options.map((option) => (\r\n            <div className='flashcard-option' key={option}>\r\n              {option}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className='back' ref={backElement}>\r\n        {answer}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Flashcard from './Flashcard';\r\n\r\nexport default function FlashcardList({ flashcards }) {\r\n  return (\r\n    <div className='card-grid'>\r\n      {flashcards.map((flashcard) => (\r\n        <Flashcard flashcard={flashcard} key={flashcard.id} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef } from 'react';\r\n\r\nexport default function Header({ categories, submit }) {\r\n  const amountElement = useRef();\r\n  const categoryElement = useRef();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    const amount = amountElement.current.value;\r\n    const category = categoryElement.current.value;\r\n    submit(amount, category);\r\n  }\r\n\r\n  return (\r\n    <form className='header' onSubmit={handleSubmit}>\r\n      <div className='form-group'>\r\n        <label htmlFor='category'>Category</label>\r\n        <select id='category' ref={categoryElement}>\r\n          {categories.map((category) => (\r\n            <option value={category.id} key={category.id}>\r\n              {category.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className='form-group'>\r\n        <label htmlFor='amount'>Number of Questions</label>\r\n        <input\r\n          type='number'\r\n          id='amount'\r\n          min='1'\r\n          step='1'\r\n          defaultValue={10}\r\n          ref={amountElement}\r\n        />\r\n      </div>\r\n      <div className='form-group'>\r\n        <button className='btn'>Generate</button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n","/**\r\n * Shuffles an array in place and returns it.\r\n * Uses the Fisher-Yates algorithm.\r\n */\r\nexport function shuffle(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    let j = randomIndex(i);\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n}\r\n\r\n/** Returns a random integer index between 0 and max inclusive. */\r\nfunction randomIndex(max) {\r\n  return Math.floor(Math.random() * (max + 1));\r\n}\r\n\r\n/** Decodes HTML entities in a string. */\r\nexport function decodeString(str) {\r\n  const textArea = document.createElement('textarea');\r\n  textArea.innerHTML = str;\r\n  return textArea.value;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport FlashcardList from './flashcards/FlashcardList';\r\nimport Header from './header/Header';\r\nimport { shuffle, decodeString } from './utils';\r\nimport './app.css';\r\n\r\nfunction App() {\r\n  const [flashcards, setFlashcards] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch('https://opentdb.com/api_category.php')\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        setCategories(response.trivia_categories);\r\n      });\r\n  }, []);\r\n\r\n  function handleHeaderSubmit(amount, category) {\r\n    fetch(`https://opentdb.com/api.php?amount=${amount}&category=${category}`)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        setFlashcards(\r\n          response.results.map((questionItem, index) => {\r\n            const answer = decodeString(questionItem.correct_answer);\r\n            const options = [\r\n              ...questionItem.incorrect_answers.map((answer) =>\r\n                decodeString(answer)\r\n              ),\r\n              answer,\r\n            ];\r\n            return {\r\n              id: `${index}-${Date.now()}`,\r\n              question: decodeString(questionItem.question),\r\n              answer,\r\n              options: shuffle(options),\r\n            };\r\n          })\r\n        );\r\n      });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header categories={categories} submit={handleHeaderSubmit} />\r\n      <div className='container'>\r\n        <FlashcardList flashcards={flashcards} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}